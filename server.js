// ðŸ’Ž 1. ENV YÃ¼kle â†’ Her ÅŸeyden Ã¶nce!
require('dotenv').config();
console.log('server.js baÅŸlÄ±yor...');

// ðŸ’Ž 2. Temel modÃ¼lleri yÃ¼kle
const express = require('express');
const app = express();

// ðŸ’Ž 3. JSON body parse middleware â†’ Routerâ€™dan Ã¶nce olmalÄ±!
app.use(express.json());

// ðŸ’Ž 4. VeritabanÄ± BaÄŸlantÄ±larÄ±
const db = require('./config/db');               // MySQL baÄŸlantÄ±sÄ±
const connectMongo = require('./config/mongo');  // MongoDB baÄŸlantÄ±sÄ±

// ðŸ’Ž 5. MongoDB baÄŸlantÄ±sÄ±nÄ± baÅŸlat
connectMongo();

// ðŸ’Ž 6. Test Routes â†’ burada kalabilir!
app.get('/', (req, res) => {
  res.send('Hybrid E-Commerce System Running!');
});

app.get('/test-mysql', async (req, res) => {
  try {
    const [rows] = await db.query('SELECT 1 + 1 AS result');
    res.json(rows);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

app.get('/test-mongo', (req, res) => {
  res.send('MongoDB working!');
});

// ðŸ’Ž 7. Auth Routes â†’ JSON parseâ€™tan sonra, en sonda olmalÄ±!
const authRoutes = require('./routes/auth');
app.use('/api/auth', authRoutes);

// ðŸ’Ž 8. Port AyarlarÄ±
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));

const cartRoutes = require('./routes/cart');
app.use('/api/cart', cartRoutes);

const productRoutes = require('./routes/product');
app.use('/api/products', productRoutes);
